<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meliodas: Peccato dell'Ira</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1a0033, #330066, #4d0099);
            color: white;
            overflow: hidden;
        }

        #gameContainer {
            position: relative;
            width: 100vw;
            height: 100vh;
        }

        #gameCanvas {
            background: radial-gradient(circle at center, #2d0066, #1a0033);
            display: block;
            border: 3px solid #6600cc;
        }

        #ui {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 100;
        }

        #health, #round, #score {
            background: rgba(0, 0, 0, 0.8);
            padding: 10px 15px;
            margin-bottom: 10px;
            border-radius: 25px;
            border: 2px solid #ff6600;
            font-weight: bold;
            font-size: 16px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
        }

        #health {
            color: #ff3366;
        }

        #round {
            color: #ffcc00;
        }

        #score {
            color: #66ff99;
        }

        #gameOver, #startScreen, #pauseScreen, #leaderboard, #nameInput {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 200;
        }

        .screen h1 {
            font-size: 3em;
            margin-bottom: 20px;
            text-shadow: 3px 3px 6px rgba(0,0,0,0.8);
            background: linear-gradient(45deg, #ff6600, #ffcc00);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .screen h2 {
            font-size: 2em;
            margin-bottom: 15px;
            color: #ff6600;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
        }

        .screen p {
            font-size: 1.2em;
            margin-bottom: 10px;
            text-align: center;
            max-width: 600px;
        }

        button {
            background: linear-gradient(45deg, #ff6600, #ff9933);
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 1.2em;
            font-weight: bold;
            border-radius: 25px;
            cursor: pointer;
            margin: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 102, 0, 0.3);
            text-transform: uppercase;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 102, 0, 0.5);
            background: linear-gradient(45deg, #ff9933, #ffcc00);
        }

        #leaderboardList {
            background: rgba(26, 0, 51, 0.9);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #6600cc;
            margin: 20px;
            max-width: 500px;
        }

        .leaderboard-entry {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #6600cc;
            font-size: 1.1em;
        }

        .leaderboard-entry:last-child {
            border-bottom: none;
        }

        .rank {
            color: #ffcc00;
            font-weight: bold;
        }

        .player-name {
            color: #66ff99;
        }

        .points {
            color: #ff6600;
            font-weight: bold;
        }

        .controls {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 10px;
            border: 2px solid #6600cc;
            font-size: 14px;
        }

        .controls p {
            margin: 5px 0;
            color: #cccccc;
        }

        #pauseBtn {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 100;
            background: linear-gradient(45deg, #6600cc, #9933ff);
            font-size: 14px;
            padding: 10px 20px;
        }

        .name-input-container {
            background: rgba(26, 0, 51, 0.9);
            padding: 30px;
            border-radius: 15px;
            border: 2px solid #6600cc;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        }

        .name-input-container input {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid #6600cc;
            border-radius: 25px;
            padding: 15px 20px;
            font-size: 1.2em;
            color: white;
            text-align: center;
            margin: 20px 0;
            width: 300px;
            outline: none;
            transition: all 0.3s ease;
        }

        .name-input-container input:focus {
            border-color: #ff6600;
            box-shadow: 0 0 20px rgba(255, 102, 0, 0.3);
        }

        .name-input-container input::placeholder {
            color: #cccccc;
        }

        #hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        
        <div id="ui">
            <div id="health">‚ù§Ô∏è Vita: 100</div>
            <div id="round">üèÜ Round: 1</div>
            <div id="score">‚≠ê Punti: 0</div>
        </div>

        <button id="pauseBtn">‚è∏Ô∏è PAUSA</button>

        <div class="controls">
            <p><strong>Controlli:</strong></p>
            <p>WASD / Frecce: Movimento</p>
            <p>Mouse: Mira e Spara</p>
            <p>SPAZIO: Pausa</p>
        </div>

        <div id="startScreen" class="screen">
            <h1>MELIODAS</h1>
            <h2>Peccato dell'Ira</h2>
            <p>Combatti contro orde infinite di demoni!</p>
            <p>Ogni demone sconfitto ti dar√† punti preziosi.</p>
            <p>Sopravvivi il pi√π a lungo possibile e scalda la classifica!</p>
            <button onclick="showNameInput()">üéÆ INIZIA GIOCO</button>
            <button onclick="showLeaderboard()">üèÜ CLASSIFICA</button>
        </div>

        <div id="nameInput" class="screen" style="display: none;">
            <div class="name-input-container">
                <h2>üë§ INSERISCI IL TUO NOME</h2>
                <p>Come vuoi essere ricordato nella classifica?</p>
                <input type="text" id="playerName" placeholder="Il tuo nome da guerriero..." maxlength="20">
                <br>
                <button onclick="startGameWithName()">‚öîÔ∏è INIZIA BATTAGLIA</button>
                <button onclick="showStartScreen()">‚¨ÖÔ∏è INDIETRO</button>
            </div>
        </div>

        <div id="gameOver" class="screen" style="display: none;">
            <h1>GAME OVER</h1>
            <h2 id="finalScore">Punti Finali: 0</h2>
            <h2 id="finalRound">Round Raggiunto: 1</h2>
            <p id="scoreMessage"></p>
            <button onclick="restartGame()">üîÑ RICOMINCIA</button>
            <button onclick="showLeaderboard()">üèÜ CLASSIFICA</button>
            <button onclick="showStartScreen()">üè† MENU PRINCIPALE</button>
        </div>

        <div id="pauseScreen" class="screen" style="display: none;">
            <h1>‚è∏Ô∏è PAUSA</h1>
            <p>Il gioco √® in pausa</p>
            <button onclick="resumeGame()">‚ñ∂Ô∏è CONTINUA</button>
            <button onclick="restartGame()">üîÑ RICOMINCIA</button>
            <button onclick="showStartScreen()">üè† MENU PRINCIPALE</button>
        </div>

        <div id="leaderboard" class="screen" style="display: none;">
            <h1>üèÜ CLASSIFICA</h1>
            <div id="leaderboardList">
                <div class="leaderboard-entry">
                    <span class="rank">1¬∞</span>
                    <span class="player-name">Campione</span>
                    <span class="points">1000 punti</span>
                </div>
            </div>
            <button onclick="hideLeaderboard()">‚¨ÖÔ∏è TORNA INDIETRO</button>
        </div>
    </div>

    <script>
        class Game {
            constructor() {
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.canvas.width = window.innerWidth;
                this.canvas.height = window.innerHeight;

                this.player = {
                    x: this.canvas.width / 2,
                    y: this.canvas.height / 2,
                    radius: 20,
                    health: 100,
                    maxHealth: 100,
                    speed: 5,
                    angle: 0
                };

                this.projectiles = [];
                this.enemies = [];
                this.particles = [];

                this.round = 1;
                this.score = 0;
                this.enemiesKilled = 0;
                this.enemiesPerRound = 3;

                this.gameRunning = false;
                this.gamePaused = false;
                this.playerName = '';

                this.keys = {};
                this.mouse = { x: 0, y: 0, down: false };

                this.setupEventListeners();
                this.loadLeaderboard();
            }

            setupEventListeners() {
                // Keyboard events
                document.addEventListener('keydown', (e) => {
                    this.keys[e.key.toLowerCase()] = true;
                    if (e.key === ' ') {
                        e.preventDefault();
                        this.togglePause();
                    }
                    if (e.key === 'Enter' && document.getElementById('nameInput').style.display === 'flex') {
                        startGameWithName();
                    }
                });

                document.addEventListener('keyup', (e) => {
                    this.keys[e.key.toLowerCase()] = false;
                });

                // Mouse events
                this.canvas.addEventListener('mousemove', (e) => {
                    const rect = this.canvas.getBoundingClientRect();
                    this.mouse.x = e.clientX - rect.left;
                    this.mouse.y = e.clientY - rect.top;
                });

                this.canvas.addEventListener('mousedown', (e) => {
                    if (this.gameRunning && !this.gamePaused) {
                        this.mouse.down = true;
                        this.shoot();
                    }
                });

                this.canvas.addEventListener('mouseup', () => {
                    this.mouse.down = false;
                });

                // Pause button
                document.getElementById('pauseBtn').addEventListener('click', () => {
                    this.togglePause();
                });

                // Window resize
                window.addEventListener('resize', () => {
                    this.canvas.width = window.innerWidth;
                    this.canvas.height = window.innerHeight;
                });
            }

            startGame() {
                this.player.health = 100;
                this.round = 1;
                this.score = 0;
                this.enemiesKilled = 0;
                this.projectiles = [];
                this.enemies = [];
                this.particles = [];
                this.gameRunning = true;
                this.gamePaused = false;

                this.spawnEnemies();
                this.gameLoop();
            }

            spawnEnemies() {
                const numEnemies = this.enemiesPerRound + Math.floor(this.round / 2);
                
                for (let i = 0; i < numEnemies; i++) {
                    const side = Math.random() * 4;
                    let x, y;

                    if (side < 1) { // Top
                        x = Math.random() * this.canvas.width;
                        y = -50;
                    } else if (side < 2) { // Right
                        x = this.canvas.width + 50;
                        y = Math.random() * this.canvas.height;
                    } else if (side < 3) { // Bottom
                        x = Math.random() * this.canvas.width;
                        y = this.canvas.height + 50;
                    } else { // Left
                        x = -50;
                        y = Math.random() * this.canvas.height;
                    }

                    this.enemies.push({
                        x: x,
                        y: y,
                        radius: 18 + Math.random() * 8,
                        speed: 1.2 + (this.round * 0.3) + Math.random() * 0.8,
                        health: 1,
                        type: Math.floor(Math.random() * 3), // 3 tipi di demoni
                        angle: Math.random() * Math.PI * 2,
                        animFrame: 0
                    });
                }
            }

            shoot() {
                const angle = Math.atan2(this.mouse.y - this.player.y, this.mouse.x - this.player.x);
                
                this.projectiles.push({
                    x: this.player.x,
                    y: this.player.y,
                    vx: Math.cos(angle) * 15,
                    vy: Math.sin(angle) * 15,
                    radius: 6,
                    damage: 1,
                    trail: []
                });
            }

            update() {
                if (!this.gameRunning || this.gamePaused) return;

                // Player movement
                let dx = 0, dy = 0;
                
                if (this.keys['w'] || this.keys['arrowup']) dy -= 1;
                if (this.keys['s'] || this.keys['arrowdown']) dy += 1;
                if (this.keys['a'] || this.keys['arrowleft']) dx -= 1;
                if (this.keys['d'] || this.keys['arrowright']) dx += 1;

                // Normalize diagonal movement
                if (dx !== 0 && dy !== 0) {
                    dx *= 0.707;
                    dy *= 0.707;
                }

                // Update player angle for sprite direction
                if (dx !== 0 || dy !== 0) {
                    this.player.angle = Math.atan2(dy, dx);
                }

                this.player.x += dx * this.player.speed;
                this.player.y += dy * this.player.speed;

                // Keep player in bounds
                this.player.x = Math.max(this.player.radius, Math.min(this.canvas.width - this.player.radius, this.player.x));
                this.player.y = Math.max(this.player.radius, Math.min(this.canvas.height - this.player.radius, this.player.y));

                // Update projectiles
                this.projectiles.forEach((projectile, pIndex) => {
                    // Add trail effect
                    projectile.trail.push({ x: projectile.x, y: projectile.y });
                    if (projectile.trail.length > 5) {
                        projectile.trail.shift();
                    }

                    projectile.x += projectile.vx;
                    projectile.y += projectile.vy;

                    // Remove if out of bounds
                    if (projectile.x < -50 || projectile.x > this.canvas.width + 50 ||
                        projectile.y < -50 || projectile.y > this.canvas.height + 50) {
                        this.projectiles.splice(pIndex, 1);
                    }
                });

                // Update enemies
                this.enemies.forEach((enemy, eIndex) => {
                    enemy.animFrame += 0.1;
                    const angle = Math.atan2(this.player.y - enemy.y, this.player.x - enemy.x);
                    enemy.x += Math.cos(angle) * enemy.speed;
                    enemy.y += Math.sin(angle) * enemy.speed;
                    enemy.angle = angle;

                    // Check collision with player
                    const distToPlayer = Math.hypot(enemy.x - this.player.x, enemy.y - this.player.y);
                    if (distToPlayer < enemy.radius + this.player.radius) {
                        this.player.health -= 10;
                        this.enemies.splice(eIndex, 1);

                        // Create damage particles
                        for (let i = 0; i < 15; i++) {
                            this.particles.push({
                                x: this.player.x,
                                y: this.player.y,
                                vx: (Math.random() - 0.5) * 10,
                                vy: (Math.random() - 0.5) * 10,
                                life: 40,
                                color: '#ff3366',
                                size: 3 + Math.random() * 3
                            });
                        }

                        if (this.player.health <= 0) {
                            this.gameOver();
                        }
                    }

                    // Check collision with projectiles
                    this.projectiles.forEach((projectile, pIndex) => {
                        const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y);
                        if (dist < projectile.radius + enemy.radius) {
                            this.enemies.splice(eIndex, 1);
                            this.projectiles.splice(pIndex, 1);
                            
                            this.score += 15 + (this.round * 5);
                            this.enemiesKilled++;

                            // Create explosion particles
                            for (let i = 0; i < 20; i++) {
                                this.particles.push({
                                    x: enemy.x,
                                    y: enemy.y,
                                    vx: (Math.random() - 0.5) * 15,
                                    vy: (Math.random() - 0.5) * 15,
                                    life: 50,
                                    color: ['#ff0066', '#ff6600', '#ffcc00'][enemy.type],
                                    size: 2 + Math.random() * 4
                                });
                            }
                        }
                    });
                });

                // Update particles
                this.particles.forEach((particle, index) => {
                    particle.x += particle.vx;
                    particle.y += particle.vy;
                    particle.vx *= 0.96;
                    particle.vy *= 0.96;
                    particle.life--;

                    if (particle.life <= 0) {
                        this.particles.splice(index, 1);
                    }
                });

                // Check if round is complete
                if (this.enemies.length === 0) {
                    this.round++;
                    this.player.health = Math.min(this.player.maxHealth, this.player.health + 25);
                    this.spawnEnemies();
                }

                this.updateUI();
            }

            drawMeliodas() {
                this.ctx.save();
                this.ctx.translate(this.player.x, this.player.y);

                // Corpo
                this.ctx.fillStyle = '#ffcc99'; // Carnagione
                this.ctx.beginPath();
                this.ctx.ellipse(0, 5, 12, 16, 0, 0, Math.PI * 2);
                this.ctx.fill();

                // Vestiti (gilet nero)
                this.ctx.fillStyle = '#1a1a1a';
                this.ctx.beginPath();
                this.ctx.ellipse(0, 8, 10, 12, 0, 0, Math.PI * 2);
                this.ctx.fill();

                // Testa
                this.ctx.fillStyle = '#ffcc99';
                this.ctx.beginPath();
                this.ctx.arc(0, -8, 12, 0, Math.PI * 2);
                this.ctx.fill();

                // Capelli biondi
                this.ctx.fillStyle = '#ffdd00';
                this.ctx.beginPath();
                this.ctx.ellipse(0, -12, 14, 8, 0, 0, Math.PI * 2);
                this.ctx.fill();

                // Dettagli capelli
                this.ctx.strokeStyle = '#ffaa00';
                this.ctx.lineWidth = 2;
                this.ctx.beginPath();
                this.ctx.moveTo(-10, -10);
                this.ctx.lineTo(-5, -15);
                this.ctx.moveTo(0, -16);
                this.ctx.lineTo(2, -20);
                this.ctx.moveTo(10, -10);
                this.ctx.lineTo(5, -15);
                this.ctx.stroke();

                // Occhi
                this.ctx.fillStyle = '#004400';
                this.ctx.beginPath();
                this.ctx.arc(-4, -8, 2, 0, Math.PI * 2);
                this.ctx.arc(4, -8, 2, 0, Math.PI * 2);
                this.ctx.fill();

                // Braccia
                this.ctx.fillStyle = '#ffcc99';
                this.ctx.beginPath();
                this.ctx.ellipse(-12, 2, 4, 10, -0.3, 0, Math.PI * 2);
                this.ctx.ellipse(12, 2, 4, 10, 0.3, 0, Math.PI * 2);
                this.ctx.fill();

                // Gambe
                this.ctx.fillStyle = '#333333'; // Pantaloni neri
                this.ctx.beginPath();
                this.ctx.ellipse(-6, 18, 5, 12, 0, 0, Math.PI * 2);
                this.ctx.ellipse(6, 18, 5, 12, 0, 0, Math.PI * 2);
                this.ctx.fill();

                // Aura di potere
                this.ctx.strokeStyle = '#ff6600';
                this.ctx.lineWidth = 3;
                this.ctx.shadowColor = '#ff6600';
                this.ctx.shadowBlur = 15;
                this.ctx.beginPath();
                this.ctx.arc(0, 0, this.player.radius + 5, 0, Math.PI * 2);
                this.ctx.stroke();

                this.ctx.restore();
            }

            drawDemon(enemy) {
                this.ctx.save();
                this.ctx.translate(enemy.x, enemy.y);
                this.ctx.rotate(enemy.angle);

                const pulse = Math.sin(enemy.animFrame * 3) * 0.1 + 1;
                this.ctx.scale(pulse, pulse);

                // Corpo del demone basato sul tipo
                if (enemy.type === 0) {
                    // Demone rosso - tipo aggressivo
                    this.ctx.fillStyle = '#cc0000';
                    this.ctx.strokeStyle = '#ff3333';
                } else if (enemy.type === 1) {
                    // Demone viola - tipo magico
                    this.ctx.fillStyle = '#6600cc';
                    this.ctx.strokeStyle = '#9933ff';
                } else {
                    // Demone arancione - tipo veloce
                    this.ctx.fillStyle = '#ff6600';
                    this.ctx.strokeStyle = '#ff9933';
                }

                // Corpo principale
                this.ctx.lineWidth = 2;
                this.ctx.beginPath();
                this.ctx.ellipse(0, 0, enemy.radius, enemy.radius * 1.2, 0, 0, Math.PI * 2);
                this.ctx.fill();
                this.ctx.stroke();

                // Corna
                this.ctx.fillStyle = '#330000';
                this.ctx.beginPath();
                this.ctx.moveTo(-8, -enemy.radius);
                this.ctx.lineTo(-12, -enemy.radius - 8);
                this.ctx.lineTo(-6, -enemy.radius - 5);
                this.ctx.closePath();
                this.ctx.fill();

                this.ctx.beginPath();
                this.ctx.moveTo(8, -enemy.radius);
                this.ctx.lineTo(12, -enemy.radius - 8);
                this.ctx.lineTo(6, -enemy.radius - 5);
                this.ctx.closePath();
                this.ctx.fill();

                // Occhi rossi
                this.ctx.fillStyle = '#ff0000';
                this.ctx.beginPath();
                this.ctx.arc(-5, -3, 3, 0, Math.PI * 2);
                this.ctx.arc(5, -3, 3, 0, Math.PI * 2);
                this.ctx.fill();

                // Pupille
                this.ctx.fillStyle = '#000000';
                this.ctx.beginPath();
                this.ctx.arc(-5, -3, 1, 0, Math.PI * 2);
                this.ctx.arc(5, -3, 1, 0, Math.PI * 2);
                this.ctx.fill();

                // Bocca con denti
                this.ctx.strokeStyle = '#000000';
                this.ctx.lineWidth = 2;
                this.ctx.beginPath();
                this.ctx.arc(0, 2, 6, 0, Math.PI);
                this.ctx.stroke();

                // Denti
                this.ctx.fillStyle = '#ffffff';
                this.ctx.beginPath();
                this.ctx.moveTo(-3, 2);
                this.ctx.lineTo(-2, 6);
                this.ctx.lineTo(-1, 2);
                this.ctx.closePath();
                this.ctx.fill();

                this.ctx.beginPath();
                this.ctx.moveTo(3, 2);
                this.ctx.lineTo(2, 6);
                this.ctx.lineTo(1, 2);
                this.ctx.closePath();
                this.ctx.fill();

                // Aura demoniaca
                this.ctx.shadowColor = enemy.type === 0 ? '#cc0000' : 
                                      enemy.type === 1 ? '#6600cc' : '#ff6600';
                this.ctx.shadowBlur = 10;
                this.ctx.strokeStyle = this.ctx.shadowColor;
                this.ctx.lineWidth = 1;
                this.ctx.beginPath();
                this.ctx.arc(0, 0, enemy.radius + 3, 0, Math.PI * 2);
                this.ctx.stroke();

                this.ctx.restore();
            }

            render() {
                // Clear canvas with gradient background
                const gradient = this.ctx.createRadialGradient(
                    this.canvas.width/2, this.canvas.height/2, 0,
                    this.canvas.width/2, this.canvas.height/2, Math.max(this.canvas.width, this.canvas.height)
                );
                gradient.addColorStop(0, '#2d0066');
                gradient.addColorStop(1, '#1a0033');
                this.ctx.fillStyle = gradient;
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

                // Draw particles
                this.particles.forEach(particle => {
                    this.ctx.save();
                    this.ctx.globalAlpha = particle.life / 50;
                    this.ctx.fillStyle = particle.color;
                    this.ctx.beginPath();
                    this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                    this.ctx.fill();
                    this.ctx.restore();
                });

                // Draw Meliodas
                this.drawMeliodas();

                // Draw projectiles with trail
                this.projectiles.forEach(projectile => {
                    // Draw trail
                    projectile.trail.forEach((point, index) => {
                        this.ctx.save();
                        this.ctx.globalAlpha = index / projectile.trail.length * 0.5;
                        this.ctx.fillStyle = '#9933ff';
                        this.ctx.beginPath();
                        this.ctx.arc(point.x, point.y, projectile.radius * (index / projectile.trail.length), 0, Math.PI * 2);
                        this.ctx.fill();
                        this.ctx.restore();
                    });

                    // Draw main projectile
                    this.ctx.save();
                    this.ctx.fillStyle = '#1a0033';
                    this.ctx.strokeStyle = '#9933ff';
                    this.ctx.lineWidth = 2;
                    this.ctx.shadowColor = '#9933ff';
                    this.ctx.shadowBlur = 15;
                    this.ctx.beginPath();
                    this.ctx.arc(projectile.x, projectile.y, projectile.radius, 0, Math.PI * 2);
                    this.ctx.fill();
                    this.ctx.stroke();
                    this.ctx.restore();
                });

                // Draw demons
                this.enemies.forEach(enemy => {
                    this.drawDemon(enemy);
                });

                // Draw crosshair
                this.ctx.strokeStyle = '#ffffff';
                this.ctx.lineWidth = 2;
                this.ctx.beginPath();
                this.ctx.moveTo(this.mouse.x - 15, this.mouse.y);
                this.ctx.lineTo(this.mouse.x + 15, this.mouse.y);
                this.ctx.moveTo(this.mouse.x, this.mouse.y - 15);
                this.ctx.lineTo(this.mouse.x, this.mouse.y + 15);
                this.ctx.stroke();
            }

            gameLoop() {
                this.update();
                this.render();
                
                if (this.gameRunning) {
                    requestAnimationFrame(() => this.gameLoop());
                }
            }

            updateUI() {
                document.getElementById('health').textContent = `‚ù§Ô∏è Vita: ${this.player.health}`;
                document.getElementById('round').textContent = `üèÜ Round: ${this.round}`;
                document.getElementById('score').textContent = `‚≠ê Punti: ${this.score}`;
            }

            togglePause() {
                if (!this.gameRunning) return;
                
                this.gamePaused = !this.gamePaused;
                
                if (this.gamePaused) {
                    document.getElementById('pauseScreen').style.display = 'flex';
                } else {
                    document.getElementById('pauseScreen').style.display = 'none';
                    if (this.gameRunning) {
                        this.gameLoop();
                    }
                }
            }

            gameOver() {
                this.gameRunning = false;
                document.getElementById('finalScore').textContent = `Punti Finali: ${this.score}`;
                document.getElementById('finalRound').textContent = `Round Raggiunto: ${this.round}`;
                
                const isHighScore = this.checkHighScore();
                if (isHighScore) {
                    document.getElementById('scoreMessage').textContent = 'üéâ NUOVO RECORD! Sei entrato in classifica!';
                } else {
                    document.getElementById('scoreMessage').textContent = 'Prova ancora per battere il tuo record!';
                }
                
                document.getElementById('gameOver').style.display = 'flex';
            }

            checkHighScore() {
                let leaderboard = JSON.parse(localStorage.getItem('meliodas_leaderboard') || '[]');
                
                leaderboard.push({
                    name: this.playerName || 'Guerriero Anonimo',
                    score: this.score,
                    round: this.round,
                    date: new Date().toLocaleDateString()
                });

                leaderboard.sort((a, b) => b.score - a.score);
                leaderboard = leaderboard.slice(0, 10);

                localStorage.setItem('meliodas_leaderboard', JSON.stringify(leaderboard));
                
                return leaderboard.findIndex(entry => 
                    entry.name === (this.playerName || 'Guerriero Anonimo') && entry.score === this.score
                ) < 5;
            }

            loadLeaderboard() {
                const leaderboard = JSON.parse(localStorage.getItem('meliodas_leaderboard') || '[]');
                const list = document.getElementById('leaderboardList');
                
                if (leaderboard.length === 0) {
                    list.innerHTML = '<div class="leaderboard-entry"><span>Nessun punteggio ancora registrato!</span></div>';
                    return;
                }

                list.innerHTML = leaderboard.map((entry, index) => `
                    <div class="leaderboard-entry">
                        <span class="rank">${index + 1}¬∞</span>
                        <span class="player-name">${entry.name}</span>
                        <span class="points">${entry.score} punti</span>
                    </div>
                `).join('');
            }
        }

        // Global game instance
        let game = new Game();

        // UI Functions
        function showNameInput() {
            document.getElementById('startScreen').style.display = 'none';
            document.getElementById('nameInput').style.display = 'flex';
            document.getElementById('playerName').focus();
        }

        function startGameWithName() {
            const nameInput = document.getElementById('playerName');
            const name = nameInput.value.trim();
            
            if (name === '') {
                alert('Per favore inserisci un nome!');
                return;
            }
            
            game.playerName = name;
            document.getElementById('nameInput').style.display = 'none';
            startGame();
        }

        function startGame() {
            document.getElementById('startScreen').style.display = 'none';
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('pauseScreen').style.display = 'none';
            document.getElementById('nameInput').style.display = 'none';
            game.startGame();
        }

        function restartGame() {
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('pauseScreen').style.display = 'none';
            game.startGame();
        }

        function resumeGame() {
            game.togglePause();
        }

        function showStartScreen() {
            document.getElementById('startScreen').style.display = 'flex';
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('pauseScreen').style.display = 'none';
            document.getElementById('leaderboard').style.display = 'none';
            document.getElementById('nameInput').style.display = 'none';
            game.gameRunning = false;
        }

        function showLeaderboard() {
            game.loadLeaderboard();
            document.getElementById('leaderboard').style.display = 'flex';
            document.getElementById('startScreen').style.display = 'none';
            document.getElementById('gameOver').style.display = 'none';
        }

        function hideLeaderboard() {
            document.getElementById('leaderboard').style.display = 'none';
            document.getElementById('startScreen').style.display = 'flex';
        }

        // Start the game
        window.addEventListener('load', () => {
            game = new Game();
        });
    </script>
</body>
</html>